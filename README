# DFCGen GTK+

    Copyright (C) 2006-2022 Ralf Hoppe <dfcgen@rho62.de>

This directory tree holds the source code of DFCGen GTK+,
the Digital Filter Coefficients Generator (DFCGen) for GTK+ 3.


## Table of Contents
* [Introduction](#introduction)
* [Features](#features)
* [Build](#build)


## Introduction

DFCGen assists the engineer in design of digital filters.  It supports in
analysis and synthesis of linear time-invariant time-discrete (LTI) systems
from the theoretical point of view.  It performs generation of system transfer
unction coefficients in the Z-domain, based on the type and specific
parameters of a chosen system.


## Features

DFCGen supports:

* Linear FIR systems of various characteristics with windowing functions as
  Hamming, van Hann, Blackman or Kaiser window
* Standard IIR filters like Cauer, Chebyshev, Butterworth and Bessel
* Various systems of free degree as e.g. Integrator, Hilbert transformer,
  Comb filter etc.
* Predefined systems with determined coefficients (and degree) as fitting
  filters, differentiators
* Frequency transformation into high-pass, band-pass and band-stop
* Edit of coefficients (change, delete, round)
* Pole/Zero analysis
* Graphical visualisation of system characteristics (plots) as magnitude
  response, phase response, attenuation, characteristic function, group delay,
  phase delay, impulse response and step response
* In plots: zoom, lin./log. and auto-scaling
* Printing of coefficients and response plots
* Save and load of the defined filter
* Export of coefficients to plain text, "C" language and MATLAB scripts


## Build
### Maintainer Make

Beside of mentioned `make` targets in file `INSTALL`, there are some
additional maintainer make targets:

* `make dist` in root directory generates a distribution package
* `make dist-debian` in root directory builds a Debian package
* `make dist-win64` in root directory builds a Win64 package using MXE
* `make distcheck` in root directory checks the package for distribution (and
  updates the `gettext` database and `po` files)
* `make maintainer-clean` in root directory deletes all object files,
  the executable and all distribution files that can be regenerated by
  Automake/Autoconf
* `make dox` in root directory generates the *Doxygen* source code
  documentation
* `make update-po` in `po` directory updates the strings list in file `de.po`
* `make all` in `po` directory builds the `gmo` file(s)
